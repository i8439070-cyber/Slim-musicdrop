from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import yt_dlp
from pathlib import Path

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
TELEGRAM_TOKEN = "7349204352:AAH_Xsu07bSXx3Kzy1le39xDgmEM2whWoCw"
DOWNLOAD_DIR = Path("downloads")
DOWNLOAD_DIR.mkdir(exist_ok=True)

# --- –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –∫–∞—Ä—Ç–∏–Ω–∫–∏
    with open("images/background.jpg", "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="üéµ –ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É —Ç—Ä–µ–∫—É –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ YouTube Music, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞—É–¥—ñ–æ."
        )

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ---
async def search_youtube_music(update: Update, context: ContextTypes.DEFAULT_TYPE, dlp=None):
    query = update.message.text.strip()
    if not query:
        await update.message.reply_text("‚ùå –í–∫–∞–∂–∏ –∑–∞–ø–∏—Ç –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")
        return

    await update.message.reply_text("‚è≥ –®—É–∫–∞—é —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é –∞—É–¥—ñ–æ –∑ YouTube Music...")

    # --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è yt_dlp ---
    ydl_opts = {
        "format": "bestaudio/best",
        "outtmpl": str(DOWNLOAD_DIR / "%(id)s.%(ext)s"),
        "postprocessors": [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        }],
        "keepvideo": False,
        "quiet": True,
        "max_filesize": 1000 * 1024 * 1024,
        "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    }

    try:
        # --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–ª—è –ø–æ—à—É–∫—É ---
        if not query.startswith("http"):
            query = f"ytsearch3:{query}"

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(query, download=True)

            # --- –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞ —Ç—Ä–µ–∫—ñ–≤ ---
            if 'entries' in info_dict and info_dict['entries']:
                entries = info_dict['entries']
                for entry in entries:
                    file_path = None
                    if 'requested_downloads' in entry:
                        file_path = entry['requested_downloads'][0]['filepath']
                    elif 'filepath' in entry:
                        file_path = entry['filepath']
                    elif '_filename' in entry:
                        file_path = str(Path(entry['_filename']).with_suffix('.mp3'))

                    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞—É–¥—ñ–æ ---
                    if file_path and Path(file_path).exists():
                        if Path(file_path).stat().st_size > 50 * 1024 * 1024:
                            await update.message.reply_text(
                                "‚ùå –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –¥–ª—è Telegram (>50 –ú–ë).\n"
                                "üîó –°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç–∏ –Ω–∞–ø—Ä—è–º—É: [–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª]({url})",
                                parse_mode="Markdown",
                                disable_web_page_preview=True
                            )
                            Path(file_path).unlink(missing_ok=True)
                            continue

                        # --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ ---
                        thumbnail_url = entry.get('thumbnail')
                        if thumbnail_url:
                            try:
                                await update.message.reply_photo(
                                    photo=thumbnail_url,
                                    caption=f"{entry.get('title', 'Audio')}\n–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {entry.get('uploader', '')}"
                                )
                            except Exception:
                                pass

                        # --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞—É–¥—ñ–æ ---
                        with open(file_path, "rb") as audio_file:
                            await update.message.reply_audio(
                                audio=audio_file,
                                title=entry.get('title', 'Audio'),
                                performer=entry.get('uploader', None)
                            )
                        Path(file_path).unlink(missing_ok=True)
                    else:
                        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞—É–¥—ñ–æ—Ñ–∞–π–ª.")

                    # --- –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è ---
                    info_text = (
                        f"üéµ <b>{entry.get('title', 'Audio')}</b>\n"
                        f"üë§ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {entry.get('uploader', '')}\n"
                        f"‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {entry.get('duration', '')} —Å–µ–∫\n"
                        f"üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {entry.get('view_count', '')}\n"
                        f"üëç –õ–∞–π–∫—ñ–≤: {entry.get('like_count', '')}\n"
                        f"üé∂ –ñ–∞–Ω—Ä: {entry.get('genre', '')}\n"
                        f"üìÄ –ê–ª—å–±–æ–º: {entry.get('album', '')}\n"
                        f"üìÖ –†—ñ–∫ –≤–∏–ø—É—Å–∫—É: {entry.get('release_year', '')}\n"
                        f"üìù –û–ø–∏—Å: {entry.get('description', '')[:200]}..."
                    )
                    await update.message.reply_text(info_text, parse_mode="HTML")

                    yt_url = entry.get('webpage_url', '')
                    if yt_url:
                        keyboard = [[InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ YouTube ‚ñ∂Ô∏è", url=yt_url)]]
                        await update.message.reply_text("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—ñ–¥–µ–æ:", reply_markup=InlineKeyboardMarkup(keyboard))

            # --- –Ø–∫—â–æ —Ü–µ –æ–¥–∏–Ω–æ—á–Ω–∏–π —Ç—Ä–µ–∫ ---
            elif 'filepath' in info_dict:
                file_path = info_dict['filepath']
            elif '_filename' in info_dict:
                file_path = str(Path(info_dict['_filename']).with_suffix('.mp3'))

            if file_path and Path(file_path).exists():
                if Path(file_path).stat().st_size > 50 * 1024 * 1024:
                    await update.message.reply_text(
                        "‚ùå –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –¥–ª—è Telegram (>50 –ú–ë).\n"
                        "üîó –°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç–∏ –Ω–∞–ø—Ä—è–º—É: [–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª]({url})",
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    )
                    Path(file_path).unlink(missing_ok=True)
                    return

                # --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ ---
                thumbnail_url = info_dict.get('thumbnail')
                if not thumbnail_url and 'entries' in info_dict and info_dict['entries']:
                    entry = info_dict['entries'][0]
                    thumbnail_url = entry.get('thumbnail')

                if thumbnail_url:
                    try:
                        await update.message.reply_photo(
                            photo=thumbnail_url,
                            caption=f"{info_dict.get('title', 'Audio')}\n–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {info_dict.get('uploader', '')}"
                        )
                    except Exception:
                        pass

                # --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞—É–¥—ñ–æ ---
                with open(file_path, "rb") as audio_file:
                    await update.message.reply_audio(
                        audio=audio_file,
                        title=info_dict.get('title', 'Audio'),
                        performer=info_dict.get('uploader', None)
                    )
                Path(file_path).unlink(missing_ok=True)
            else:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞—É–¥—ñ–æ—Ñ–∞–π–ª.")
            
            # --- –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç—Ä–µ–∫ ---
            info_text = (
                f"üéµ <b>{info_dict.get('title', 'Audio')}</b>\n"
                f"üë§ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {info_dict.get('uploader', '')}\n"
                f"‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {info_dict.get('duration', '')} —Å–µ–∫\n"
                f"üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {info_dict.get('view_count', '')}\n"
                f"üëç –õ–∞–π–∫—ñ–≤: {info_dict.get('like_count', '')}\n"
                f"üé∂ –ñ–∞–Ω—Ä: {info_dict.get('genre', '')}\n"
                f"üìÄ –ê–ª—å–±–æ–º: {info_dict.get('album', '')}\n"
                f"üìÖ –†—ñ–∫ –≤–∏–ø—É—Å–∫—É: {info_dict.get('release_year', '')}\n"
                f"üìù –û–ø–∏—Å: {info_dict.get('description', '')[:200]}..."
            )
            await update.message.reply_text(info_text, parse_mode="HTML")

            yt_url = info_dict.get('webpage_url', '')
            if yt_url:
                keyboard = [[InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ YouTube ‚ñ∂Ô∏è", url=yt_url)]]
                await update.message.reply_text("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—ñ–¥–µ–æ:", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        # --- –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ ---
        pass

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
app = Application.builder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_youtube_music))
app.run_polling()
